services:
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - distributed_net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Node 0
  node_0:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    environment:
      - NODE_ID=node_0
      - NODE_HOST=node_0
      - NODE_PORT=8080
      - API_PORT=8080
      - NODE_TYPE=lock_manager
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NUM_NODES=3
      - PEER_NODES=node_1:node_1:8081,node_2:node_2:8082  # ✅ Port API yang benar
      - LOG_LEVEL=INFO
    ports:
      - "8080:8080"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - distributed_net
    restart: unless-stopped
    volumes:
      - ../logs:/app/logs
    command: python -m uvicorn src.api.lock_manager_server:app --host 0.0.0.0 --port 8080

  # Node 1
  node_1:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    environment:
      - NODE_ID=node_1
      - NODE_HOST=node_1
      - NODE_PORT=8081
      - API_PORT=8081
      - NODE_TYPE=lock_manager
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NUM_NODES=3
      - PEER_NODES=node_0:node_0:8080,node_2:node_2:8082  # ✅ Port API yang benar
      - LOG_LEVEL=INFO
    ports:
      - "8081:8081"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - distributed_net
    restart: unless-stopped
    volumes:
      - ../logs:/app/logs
    command: python -m uvicorn src.api.lock_manager_server:app --host 0.0.0.0 --port 8081

  # Node 2
  node_2:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    environment:
      - NODE_ID=node_2
      - NODE_HOST=node_2
      - NODE_PORT=8082
      - API_PORT=8082
      - NODE_TYPE=lock_manager
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NUM_NODES=3
      - PEER_NODES=node_0:node_0:8080,node_1:node_1:8081  # ✅ Port API yang benar
      - LOG_LEVEL=INFO
    ports:
      - "8082:8082"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - distributed_net
    restart: unless-stopped
    volumes:
      - ../logs:/app/logs
    command: python -m uvicorn src.api.lock_manager_server:app --host 0.0.0.0 --port 8082

  # Queue Node 0
  queue_0:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    environment:
      - NODE_ID=queue_0
      - NODE_HOST=queue_0
      - NODE_PORT=9000
      - API_PORT=9000
      - NODE_TYPE=queue
      - NUM_NODES=3
      - PEER_NODES=queue_1:queue_1:9001,queue_2:queue_2:9002
      - LOG_LEVEL=INFO
    ports:
      - "9000:9000"
    networks:
      - distributed_net
    restart: unless-stopped
    volumes:
      - ../logs:/app/logs
    command: python -m uvicorn src.api.queue_node_server:app --host 0.0.0.0 --port 9000

  # Queue Node 1
  queue_1:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    environment:
      - NODE_ID=queue_1
      - NODE_HOST=queue_1
      - NODE_PORT=9001
      - API_PORT=9001
      - NODE_TYPE=queue
      - NUM_NODES=3
      - PEER_NODES=queue_0:queue_0:9000,queue_2:queue_2:9002
      - LOG_LEVEL=INFO
    ports:
      - "9001:9001"
    networks:
      - distributed_net
    restart: unless-stopped
    volumes:
      - ../logs:/app/logs
    command: python -m uvicorn src.api.queue_node_server:app --host 0.0.0.0 --port 9001

  # Queue Node 2
  queue_2:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    environment:
      - NODE_ID=queue_2
      - NODE_HOST=queue_2
      - NODE_PORT=9002
      - API_PORT=9002
      - NODE_TYPE=queue
      - NUM_NODES=3
      - PEER_NODES=queue_0:queue_0:9000,queue_1:queue_1:9001
      - LOG_LEVEL=INFO
    ports:
      - "9002:9002"
    networks:
      - distributed_net
    restart: unless-stopped
    volumes:
      - ../logs:/app/logs
    command: python -m uvicorn src.api.queue_node_server:app --host 0.0.0.0 --port 9002

networks:
  distributed_net:
    driver: bridge

volumes:
  redis_data: